// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dispatcher.proto

package dispatcher

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ID struct {
	PodName              string   `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	PodNamespace         string   `protobuf:"bytes,2,opt,name=pod_namespace,json=podNamespace,proto3" json:"pod_namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ID) Reset()         { *m = ID{} }
func (m *ID) String() string { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()    {}
func (*ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_dispatcher_6f9319240314e088, []int{0}
}
func (m *ID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ID.Unmarshal(m, b)
}
func (m *ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ID.Marshal(b, m, deterministic)
}
func (dst *ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ID.Merge(dst, src)
}
func (m *ID) XXX_Size() int {
	return xxx_messageInfo_ID.Size(m)
}
func (m *ID) XXX_DiscardUnknown() {
	xxx_messageInfo_ID.DiscardUnknown(m)
}

var xxx_messageInfo_ID proto.InternalMessageInfo

func (m *ID) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *ID) GetPodNamespace() string {
	if m != nil {
		return m.PodNamespace
	}
	return ""
}

// Connect message is sent by the client which wants to build memif connection
// to another pod which is in Listen mode.
type ConnectMsg struct {
	SrcId                *ID      `protobuf:"bytes,1,opt,name=src_id,json=srcId,proto3" json:"src_id,omitempty"`
	DstId                *ID      `protobuf:"bytes,2,opt,name=dst_id,json=dstId,proto3" json:"dst_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectMsg) Reset()         { *m = ConnectMsg{} }
func (m *ConnectMsg) String() string { return proto.CompactTextString(m) }
func (*ConnectMsg) ProtoMessage()    {}
func (*ConnectMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_dispatcher_6f9319240314e088, []int{1}
}
func (m *ConnectMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectMsg.Unmarshal(m, b)
}
func (m *ConnectMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectMsg.Marshal(b, m, deterministic)
}
func (dst *ConnectMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectMsg.Merge(dst, src)
}
func (m *ConnectMsg) XXX_Size() int {
	return xxx_messageInfo_ConnectMsg.Size(m)
}
func (m *ConnectMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectMsg proto.InternalMessageInfo

func (m *ConnectMsg) GetSrcId() *ID {
	if m != nil {
		return m.SrcId
	}
	return nil
}

func (m *ConnectMsg) GetDstId() *ID {
	if m != nil {
		return m.DstId
	}
	return nil
}

// Listen message is sent by the the client which wants to listen for incoming
// memif connection. Usually a server type application.
type ListenMsg struct {
	ListenerId *ID `protobuf:"bytes,1,opt,name=listener_id,json=listenerId,proto3" json:"listener_id,omitempty"`
	// max_supported_connections identifies a max number of connections supported by
	// a specific listener.
	MaxConnections       int32    `protobuf:"varint,2,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenMsg) Reset()         { *m = ListenMsg{} }
func (m *ListenMsg) String() string { return proto.CompactTextString(m) }
func (*ListenMsg) ProtoMessage()    {}
func (*ListenMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_dispatcher_6f9319240314e088, []int{2}
}
func (m *ListenMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenMsg.Unmarshal(m, b)
}
func (m *ListenMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenMsg.Marshal(b, m, deterministic)
}
func (dst *ListenMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenMsg.Merge(dst, src)
}
func (m *ListenMsg) XXX_Size() int {
	return xxx_messageInfo_ListenMsg.Size(m)
}
func (m *ListenMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ListenMsg proto.InternalMessageInfo

func (m *ListenMsg) GetListenerId() *ID {
	if m != nil {
		return m.ListenerId
	}
	return nil
}

func (m *ListenMsg) GetMaxConnections() int32 {
	if m != nil {
		return m.MaxConnections
	}
	return 0
}

// Socket message is sent by the dispatcher to both client and server with the sockets
// they have to use to build memif connection
type SocketMsg struct {
	PodId                *ID      `protobuf:"bytes,1,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty"`
	Fd                   int64    `protobuf:"varint,2,opt,name=fd,proto3" json:"fd,omitempty"`
	Success              bool     `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	ExtendedError        string   `protobuf:"bytes,4,opt,name=extended_error,json=extendedError,proto3" json:"extended_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SocketMsg) Reset()         { *m = SocketMsg{} }
func (m *SocketMsg) String() string { return proto.CompactTextString(m) }
func (*SocketMsg) ProtoMessage()    {}
func (*SocketMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_dispatcher_6f9319240314e088, []int{3}
}
func (m *SocketMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SocketMsg.Unmarshal(m, b)
}
func (m *SocketMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SocketMsg.Marshal(b, m, deterministic)
}
func (dst *SocketMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocketMsg.Merge(dst, src)
}
func (m *SocketMsg) XXX_Size() int {
	return xxx_messageInfo_SocketMsg.Size(m)
}
func (m *SocketMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SocketMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SocketMsg proto.InternalMessageInfo

func (m *SocketMsg) GetPodId() *ID {
	if m != nil {
		return m.PodId
	}
	return nil
}

func (m *SocketMsg) GetFd() int64 {
	if m != nil {
		return m.Fd
	}
	return 0
}

func (m *SocketMsg) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *SocketMsg) GetExtendedError() string {
	if m != nil {
		return m.ExtendedError
	}
	return ""
}

func init() {
	proto.RegisterType((*ID)(nil), "dispatcher.ID")
	proto.RegisterType((*ConnectMsg)(nil), "dispatcher.ConnectMsg")
	proto.RegisterType((*ListenMsg)(nil), "dispatcher.ListenMsg")
	proto.RegisterType((*SocketMsg)(nil), "dispatcher.SocketMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DispatcherClient is the client API for Dispatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DispatcherClient interface {
	Connect(ctx context.Context, in *ConnectMsg, opts ...grpc.CallOption) (*SocketMsg, error)
	Listen(ctx context.Context, in *ListenMsg, opts ...grpc.CallOption) (*SocketMsg, error)
}

type dispatcherClient struct {
	cc *grpc.ClientConn
}

func NewDispatcherClient(cc *grpc.ClientConn) DispatcherClient {
	return &dispatcherClient{cc}
}

func (c *dispatcherClient) Connect(ctx context.Context, in *ConnectMsg, opts ...grpc.CallOption) (*SocketMsg, error) {
	out := new(SocketMsg)
	err := c.cc.Invoke(ctx, "/dispatcher.Dispatcher/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherClient) Listen(ctx context.Context, in *ListenMsg, opts ...grpc.CallOption) (*SocketMsg, error) {
	out := new(SocketMsg)
	err := c.cc.Invoke(ctx, "/dispatcher.Dispatcher/Listen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatcherServer is the server API for Dispatcher service.
type DispatcherServer interface {
	Connect(context.Context, *ConnectMsg) (*SocketMsg, error)
	Listen(context.Context, *ListenMsg) (*SocketMsg, error)
}

func RegisterDispatcherServer(s *grpc.Server, srv DispatcherServer) {
	s.RegisterService(&_Dispatcher_serviceDesc, srv)
}

func _Dispatcher_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispatcher.Dispatcher/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).Connect(ctx, req.(*ConnectMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispatcher_Listen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).Listen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispatcher.Dispatcher/Listen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).Listen(ctx, req.(*ListenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dispatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dispatcher.Dispatcher",
	HandlerType: (*DispatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Dispatcher_Connect_Handler,
		},
		{
			MethodName: "Listen",
			Handler:    _Dispatcher_Listen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dispatcher.proto",
}

func init() { proto.RegisterFile("dispatcher.proto", fileDescriptor_dispatcher_6f9319240314e088) }

var fileDescriptor_dispatcher_6f9319240314e088 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcf, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0x49, 0xfa, 0xed, 0xaf, 0xe9, 0xb7, 0x51, 0x16, 0x94, 0xe8, 0xa9, 0x44, 0x8a, 0x3d,
	0x55, 0xa8, 0x20, 0xde, 0x1b, 0x0f, 0x01, 0xf5, 0x10, 0x6f, 0x5e, 0x42, 0xdc, 0x99, 0x6a, 0xd0,
	0x64, 0x97, 0x9d, 0x15, 0x7a, 0xf2, 0xe2, 0x3f, 0x2e, 0xd9, 0x36, 0x4d, 0x05, 0x7b, 0x9c, 0x37,
	0x6f, 0x67, 0x3e, 0xf3, 0x58, 0x38, 0xc6, 0x82, 0x75, 0x6e, 0xe5, 0x1b, 0x99, 0xb9, 0x36, 0xca,
	0x2a, 0x01, 0xad, 0x12, 0xc5, 0xe0, 0x27, 0xb1, 0x38, 0x83, 0x81, 0x56, 0x98, 0x55, 0x79, 0x49,
	0xa1, 0x37, 0xf1, 0x66, 0xc3, 0xb4, 0xaf, 0x15, 0x3e, 0xe6, 0x25, 0x89, 0x0b, 0x18, 0x37, 0x2d,
	0xd6, 0xb9, 0xa4, 0xd0, 0x77, 0xfd, 0xff, 0xdb, 0xbe, 0xd3, 0xa2, 0x67, 0x80, 0xa5, 0xaa, 0x2a,
	0x92, 0xf6, 0x81, 0x5f, 0xc5, 0x14, 0x7a, 0x6c, 0x64, 0x56, 0xa0, 0x9b, 0x35, 0x5a, 0x04, 0xf3,
	0x3d, 0x84, 0x24, 0x4e, 0xbb, 0x6c, 0x64, 0x82, 0xb5, 0x0d, 0xd9, 0xd6, 0x36, 0xff, 0x6f, 0x1b,
	0xb2, 0x4d, 0x30, 0x22, 0x18, 0xde, 0x17, 0x6c, 0xa9, 0xaa, 0x47, 0x5f, 0xc1, 0xe8, 0xc3, 0x15,
	0x64, 0x0e, 0xcf, 0x87, 0xc6, 0x92, 0xa0, 0xb8, 0x84, 0xa3, 0x32, 0x5f, 0x67, 0x72, 0x43, 0x57,
	0xa8, 0x8a, 0xdd, 0xb6, 0x6e, 0x1a, 0x94, 0xf9, 0x7a, 0xd9, 0xaa, 0xd1, 0xb7, 0x07, 0xc3, 0x27,
	0x25, 0xdf, 0xa9, 0x39, 0xa1, 0xbe, 0xfa, 0xf0, 0x09, 0x5a, 0x61, 0x82, 0x22, 0x00, 0x7f, 0xb5,
	0xc1, 0xef, 0xa4, 0xfe, 0x0a, 0x45, 0x08, 0x7d, 0xfe, 0x94, 0x92, 0x98, 0xc3, 0xce, 0xc4, 0x9b,
	0x0d, 0xd2, 0xa6, 0x14, 0x53, 0x08, 0x68, 0x6d, 0xa9, 0x42, 0xc2, 0x8c, 0x8c, 0x51, 0x26, 0xfc,
	0xe7, 0x72, 0x1c, 0x37, 0xea, 0x5d, 0x2d, 0x2e, 0xbe, 0x00, 0xe2, 0xdd, 0x22, 0x71, 0x0b, 0xfd,
	0x2d, 0xa2, 0x38, 0xdd, 0x07, 0x68, 0xb3, 0x3e, 0x3f, 0xd9, 0xd7, 0x5b, 0xfe, 0x1b, 0xe8, 0x6d,
	0x42, 0x13, 0xbf, 0x0c, 0xbb, 0x20, 0x0f, 0xbc, 0x7b, 0xe9, 0xb9, 0x1f, 0x72, 0xfd, 0x13, 0x00,
	0x00, 0xff, 0xff, 0x4b, 0xf6, 0xec, 0x46, 0x35, 0x02, 0x00, 0x00,
}
