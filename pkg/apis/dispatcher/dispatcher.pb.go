// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dispatcher.proto

package dispatcher

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ERR int32

const (
	ERR_NO_ERROR          ERR = 0
	ERR_SVC_NOT_AVAILABLE ERR = 1
	ERR_KEEPALIVE         ERR = 2
)

var ERR_name = map[int32]string{
	0: "NO_ERROR",
	1: "SVC_NOT_AVAILABLE",
	2: "KEEPALIVE",
}
var ERR_value = map[string]int32{
	"NO_ERROR":          0,
	"SVC_NOT_AVAILABLE": 1,
	"KEEPALIVE":         2,
}

func (x ERR) String() string {
	return proto.EnumName(ERR_name, int32(x))
}
func (ERR) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dispatcher_9a5aac3941ee9f25, []int{0}
}

type ConnectMsg struct {
	PodUuid              string   `protobuf:"bytes,1,opt,name=pod_uuid,json=podUuid,proto3" json:"pod_uuid,omitempty"`
	SvcUuid              string   `protobuf:"bytes,2,opt,name=svc_uuid,json=svcUuid,proto3" json:"svc_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectMsg) Reset()         { *m = ConnectMsg{} }
func (m *ConnectMsg) String() string { return proto.CompactTextString(m) }
func (*ConnectMsg) ProtoMessage()    {}
func (*ConnectMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_dispatcher_9a5aac3941ee9f25, []int{0}
}
func (m *ConnectMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectMsg.Unmarshal(m, b)
}
func (m *ConnectMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectMsg.Marshal(b, m, deterministic)
}
func (dst *ConnectMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectMsg.Merge(dst, src)
}
func (m *ConnectMsg) XXX_Size() int {
	return xxx_messageInfo_ConnectMsg.Size(m)
}
func (m *ConnectMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectMsg proto.InternalMessageInfo

func (m *ConnectMsg) GetPodUuid() string {
	if m != nil {
		return m.PodUuid
	}
	return ""
}

func (m *ConnectMsg) GetSvcUuid() string {
	if m != nil {
		return m.SvcUuid
	}
	return ""
}

type ListenMsg struct {
	PodUuid              string   `protobuf:"bytes,1,opt,name=pod_uuid,json=podUuid,proto3" json:"pod_uuid,omitempty"`
	SvcUuid              string   `protobuf:"bytes,2,opt,name=svc_uuid,json=svcUuid,proto3" json:"svc_uuid,omitempty"`
	MaxConnections       int32    `protobuf:"varint,3,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenMsg) Reset()         { *m = ListenMsg{} }
func (m *ListenMsg) String() string { return proto.CompactTextString(m) }
func (*ListenMsg) ProtoMessage()    {}
func (*ListenMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_dispatcher_9a5aac3941ee9f25, []int{1}
}
func (m *ListenMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenMsg.Unmarshal(m, b)
}
func (m *ListenMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenMsg.Marshal(b, m, deterministic)
}
func (dst *ListenMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenMsg.Merge(dst, src)
}
func (m *ListenMsg) XXX_Size() int {
	return xxx_messageInfo_ListenMsg.Size(m)
}
func (m *ListenMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ListenMsg proto.InternalMessageInfo

func (m *ListenMsg) GetPodUuid() string {
	if m != nil {
		return m.PodUuid
	}
	return ""
}

func (m *ListenMsg) GetSvcUuid() string {
	if m != nil {
		return m.SvcUuid
	}
	return ""
}

func (m *ListenMsg) GetMaxConnections() int32 {
	if m != nil {
		return m.MaxConnections
	}
	return 0
}

type ReplyMsg struct {
	PodUuid              string   `protobuf:"bytes,1,opt,name=pod_uuid,json=podUuid,proto3" json:"pod_uuid,omitempty"`
	SvcUuid              string   `protobuf:"bytes,2,opt,name=svc_uuid,json=svcUuid,proto3" json:"svc_uuid,omitempty"`
	Socket               string   `protobuf:"bytes,3,opt,name=socket,proto3" json:"socket,omitempty"`
	Error                ERR      `protobuf:"varint,4,opt,name=error,proto3,enum=dispatcher.ERR" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyMsg) Reset()         { *m = ReplyMsg{} }
func (m *ReplyMsg) String() string { return proto.CompactTextString(m) }
func (*ReplyMsg) ProtoMessage()    {}
func (*ReplyMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_dispatcher_9a5aac3941ee9f25, []int{2}
}
func (m *ReplyMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyMsg.Unmarshal(m, b)
}
func (m *ReplyMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyMsg.Marshal(b, m, deterministic)
}
func (dst *ReplyMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyMsg.Merge(dst, src)
}
func (m *ReplyMsg) XXX_Size() int {
	return xxx_messageInfo_ReplyMsg.Size(m)
}
func (m *ReplyMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyMsg proto.InternalMessageInfo

func (m *ReplyMsg) GetPodUuid() string {
	if m != nil {
		return m.PodUuid
	}
	return ""
}

func (m *ReplyMsg) GetSvcUuid() string {
	if m != nil {
		return m.SvcUuid
	}
	return ""
}

func (m *ReplyMsg) GetSocket() string {
	if m != nil {
		return m.Socket
	}
	return ""
}

func (m *ReplyMsg) GetError() ERR {
	if m != nil {
		return m.Error
	}
	return ERR_NO_ERROR
}

func init() {
	proto.RegisterType((*ConnectMsg)(nil), "dispatcher.ConnectMsg")
	proto.RegisterType((*ListenMsg)(nil), "dispatcher.ListenMsg")
	proto.RegisterType((*ReplyMsg)(nil), "dispatcher.ReplyMsg")
	proto.RegisterEnum("dispatcher.ERR", ERR_name, ERR_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DispatcherClient is the client API for Dispatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DispatcherClient interface {
	Connect(ctx context.Context, in *ConnectMsg, opts ...grpc.CallOption) (Dispatcher_ConnectClient, error)
	Listen(ctx context.Context, in *ListenMsg, opts ...grpc.CallOption) (Dispatcher_ListenClient, error)
}

type dispatcherClient struct {
	cc *grpc.ClientConn
}

func NewDispatcherClient(cc *grpc.ClientConn) DispatcherClient {
	return &dispatcherClient{cc}
}

func (c *dispatcherClient) Connect(ctx context.Context, in *ConnectMsg, opts ...grpc.CallOption) (Dispatcher_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dispatcher_serviceDesc.Streams[0], "/dispatcher.Dispatcher/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &dispatcherConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dispatcher_ConnectClient interface {
	Recv() (*ReplyMsg, error)
	grpc.ClientStream
}

type dispatcherConnectClient struct {
	grpc.ClientStream
}

func (x *dispatcherConnectClient) Recv() (*ReplyMsg, error) {
	m := new(ReplyMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dispatcherClient) Listen(ctx context.Context, in *ListenMsg, opts ...grpc.CallOption) (Dispatcher_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dispatcher_serviceDesc.Streams[1], "/dispatcher.Dispatcher/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &dispatcherListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dispatcher_ListenClient interface {
	Recv() (*ReplyMsg, error)
	grpc.ClientStream
}

type dispatcherListenClient struct {
	grpc.ClientStream
}

func (x *dispatcherListenClient) Recv() (*ReplyMsg, error) {
	m := new(ReplyMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DispatcherServer is the server API for Dispatcher service.
type DispatcherServer interface {
	Connect(*ConnectMsg, Dispatcher_ConnectServer) error
	Listen(*ListenMsg, Dispatcher_ListenServer) error
}

func RegisterDispatcherServer(s *grpc.Server, srv DispatcherServer) {
	s.RegisterService(&_Dispatcher_serviceDesc, srv)
}

func _Dispatcher_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DispatcherServer).Connect(m, &dispatcherConnectServer{stream})
}

type Dispatcher_ConnectServer interface {
	Send(*ReplyMsg) error
	grpc.ServerStream
}

type dispatcherConnectServer struct {
	grpc.ServerStream
}

func (x *dispatcherConnectServer) Send(m *ReplyMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _Dispatcher_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DispatcherServer).Listen(m, &dispatcherListenServer{stream})
}

type Dispatcher_ListenServer interface {
	Send(*ReplyMsg) error
	grpc.ServerStream
}

type dispatcherListenServer struct {
	grpc.ServerStream
}

func (x *dispatcherListenServer) Send(m *ReplyMsg) error {
	return x.ServerStream.SendMsg(m)
}

var _Dispatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dispatcher.Dispatcher",
	HandlerType: (*DispatcherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Dispatcher_Connect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _Dispatcher_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dispatcher.proto",
}

func init() { proto.RegisterFile("dispatcher.proto", fileDescriptor_dispatcher_9a5aac3941ee9f25) }

var fileDescriptor_dispatcher_9a5aac3941ee9f25 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x4f, 0xfa, 0x40,
	0x10, 0xc5, 0xbf, 0x0b, 0x5f, 0x7e, 0x74, 0xa2, 0x50, 0x37, 0x42, 0xd0, 0x13, 0x69, 0x62, 0x6c,
	0x3c, 0x10, 0x83, 0x07, 0xc3, 0xb1, 0xd4, 0x3d, 0x10, 0x2b, 0x35, 0xa3, 0xf6, 0xda, 0xd4, 0xed,
	0x46, 0xab, 0xd2, 0x6d, 0xba, 0x2d, 0xc1, 0x93, 0xfe, 0xe9, 0x06, 0x8a, 0xb4, 0x17, 0x2f, 0x1c,
	0xf7, 0x7d, 0x76, 0xe7, 0xed, 0xcc, 0x1b, 0xd0, 0xc3, 0x48, 0x25, 0x41, 0xc6, 0x5f, 0x45, 0x3a,
	0x4a, 0x52, 0x99, 0x49, 0x0a, 0xa5, 0x62, 0x4c, 0x01, 0x6c, 0x19, 0xc7, 0x82, 0x67, 0x77, 0xea,
	0x85, 0x9e, 0x40, 0x3b, 0x91, 0xa1, 0x9f, 0xe7, 0x51, 0x38, 0x20, 0x43, 0x62, 0x6a, 0xd8, 0x4a,
	0x64, 0xf8, 0x94, 0x47, 0xe1, 0x1a, 0xa9, 0x25, 0x2f, 0x50, 0xad, 0x40, 0x6a, 0xc9, 0xd7, 0xc8,
	0x78, 0x03, 0xcd, 0x89, 0x54, 0x26, 0xe2, 0xbd, 0x4b, 0xd0, 0x73, 0xe8, 0x2e, 0x82, 0x95, 0xcf,
	0x8b, 0xaf, 0x44, 0x32, 0x56, 0x83, 0xfa, 0x90, 0x98, 0x0d, 0xec, 0x2c, 0x82, 0x95, 0x5d, 0xaa,
	0xc6, 0x17, 0xb4, 0x51, 0x24, 0x1f, 0x9f, 0xfb, 0x5b, 0xf5, 0xa1, 0xa9, 0x24, 0x7f, 0x17, 0xd9,
	0xc6, 0x41, 0xc3, 0xed, 0x89, 0x9e, 0x41, 0x43, 0xa4, 0xa9, 0x4c, 0x07, 0xff, 0x87, 0xc4, 0xec,
	0x8c, 0xbb, 0xa3, 0xca, 0xdc, 0x18, 0x22, 0x16, 0xf4, 0x62, 0x02, 0x75, 0x86, 0x48, 0x0f, 0xa0,
	0x3d, 0x77, 0x7d, 0x86, 0xe8, 0xa2, 0xfe, 0x8f, 0xf6, 0xe0, 0xe8, 0xc1, 0xb3, 0xfd, 0xb9, 0xfb,
	0xe8, 0x5b, 0x9e, 0x35, 0x73, 0xac, 0xa9, 0xc3, 0x74, 0x42, 0x0f, 0x41, 0xbb, 0x65, 0xec, 0xde,
	0x72, 0x66, 0x1e, 0xd3, 0x6b, 0xe3, 0x6f, 0x02, 0x70, 0xb3, 0x2b, 0x4a, 0x27, 0xd0, 0xda, 0x76,
	0x46, 0xfb, 0x55, 0xb3, 0x32, 0x8f, 0xd3, 0xe3, 0xaa, 0xfe, 0xdb, 0xf7, 0x25, 0xa1, 0xd7, 0xd0,
	0x2c, 0x26, 0x4e, 0x7b, 0xd5, 0x1b, 0xbb, 0x14, 0xfe, 0x7a, 0xf8, 0xdc, 0xdc, 0x6c, 0xc0, 0xd5,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x42, 0xe8, 0x15, 0x15, 0x02, 0x00, 0x00,
}
