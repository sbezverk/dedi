// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dispatcher.proto

package dispatcher

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ERR int32

const (
	ERR_NO_ERROR          ERR = 0
	ERR_SVC_NOT_AVAILABLE ERR = 1
)

var ERR_name = map[int32]string{
	0: "NO_ERROR",
	1: "SVC_NOT_AVAILABLE",
}
var ERR_value = map[string]int32{
	"NO_ERROR":          0,
	"SVC_NOT_AVAILABLE": 1,
}

func (x ERR) String() string {
	return proto.EnumName(ERR_name, int32(x))
}
func (ERR) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dispatcher_41f30e2fd30cd3f6, []int{0}
}

// POD identifies pod requeesting connection or offering a service
type POD struct {
	PodUuid              string   `protobuf:"bytes,1,opt,name=pod_uuid,json=podUuid,proto3" json:"pod_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *POD) Reset()         { *m = POD{} }
func (m *POD) String() string { return proto.CompactTextString(m) }
func (*POD) ProtoMessage()    {}
func (*POD) Descriptor() ([]byte, []int) {
	return fileDescriptor_dispatcher_41f30e2fd30cd3f6, []int{0}
}
func (m *POD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_POD.Unmarshal(m, b)
}
func (m *POD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_POD.Marshal(b, m, deterministic)
}
func (dst *POD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_POD.Merge(dst, src)
}
func (m *POD) XXX_Size() int {
	return xxx_messageInfo_POD.Size(m)
}
func (m *POD) XXX_DiscardUnknown() {
	xxx_messageInfo_POD.DiscardUnknown(m)
}

var xxx_messageInfo_POD proto.InternalMessageInfo

func (m *POD) GetPodUuid() string {
	if m != nil {
		return m.PodUuid
	}
	return ""
}

// SVC describes Service
type SVC struct {
	SvcUuid              string   `protobuf:"bytes,1,opt,name=svc_uuid,json=svcUuid,proto3" json:"svc_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SVC) Reset()         { *m = SVC{} }
func (m *SVC) String() string { return proto.CompactTextString(m) }
func (*SVC) ProtoMessage()    {}
func (*SVC) Descriptor() ([]byte, []int) {
	return fileDescriptor_dispatcher_41f30e2fd30cd3f6, []int{1}
}
func (m *SVC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SVC.Unmarshal(m, b)
}
func (m *SVC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SVC.Marshal(b, m, deterministic)
}
func (dst *SVC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SVC.Merge(dst, src)
}
func (m *SVC) XXX_Size() int {
	return xxx_messageInfo_SVC.Size(m)
}
func (m *SVC) XXX_DiscardUnknown() {
	xxx_messageInfo_SVC.DiscardUnknown(m)
}

var xxx_messageInfo_SVC proto.InternalMessageInfo

func (m *SVC) GetSvcUuid() string {
	if m != nil {
		return m.SvcUuid
	}
	return ""
}

type ConnectMsg struct {
	PodUuid              *POD     `protobuf:"bytes,1,opt,name=pod_uuid,json=podUuid,proto3" json:"pod_uuid,omitempty"`
	SvcUuid              *SVC     `protobuf:"bytes,2,opt,name=svc_uuid,json=svcUuid,proto3" json:"svc_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectMsg) Reset()         { *m = ConnectMsg{} }
func (m *ConnectMsg) String() string { return proto.CompactTextString(m) }
func (*ConnectMsg) ProtoMessage()    {}
func (*ConnectMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_dispatcher_41f30e2fd30cd3f6, []int{2}
}
func (m *ConnectMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectMsg.Unmarshal(m, b)
}
func (m *ConnectMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectMsg.Marshal(b, m, deterministic)
}
func (dst *ConnectMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectMsg.Merge(dst, src)
}
func (m *ConnectMsg) XXX_Size() int {
	return xxx_messageInfo_ConnectMsg.Size(m)
}
func (m *ConnectMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectMsg proto.InternalMessageInfo

func (m *ConnectMsg) GetPodUuid() *POD {
	if m != nil {
		return m.PodUuid
	}
	return nil
}

func (m *ConnectMsg) GetSvcUuid() *SVC {
	if m != nil {
		return m.SvcUuid
	}
	return nil
}

type ListenMsg struct {
	PodUuid              *POD     `protobuf:"bytes,1,opt,name=pod_uuid,json=podUuid,proto3" json:"pod_uuid,omitempty"`
	SvcUuid              *SVC     `protobuf:"bytes,2,opt,name=svc_uuid,json=svcUuid,proto3" json:"svc_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenMsg) Reset()         { *m = ListenMsg{} }
func (m *ListenMsg) String() string { return proto.CompactTextString(m) }
func (*ListenMsg) ProtoMessage()    {}
func (*ListenMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_dispatcher_41f30e2fd30cd3f6, []int{3}
}
func (m *ListenMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenMsg.Unmarshal(m, b)
}
func (m *ListenMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenMsg.Marshal(b, m, deterministic)
}
func (dst *ListenMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenMsg.Merge(dst, src)
}
func (m *ListenMsg) XXX_Size() int {
	return xxx_messageInfo_ListenMsg.Size(m)
}
func (m *ListenMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ListenMsg proto.InternalMessageInfo

func (m *ListenMsg) GetPodUuid() *POD {
	if m != nil {
		return m.PodUuid
	}
	return nil
}

func (m *ListenMsg) GetSvcUuid() *SVC {
	if m != nil {
		return m.SvcUuid
	}
	return nil
}

type ReplyMsg struct {
	PodUuid              *POD     `protobuf:"bytes,1,opt,name=pod_uuid,json=podUuid,proto3" json:"pod_uuid,omitempty"`
	SvcUuid              *SVC     `protobuf:"bytes,2,opt,name=svc_uuid,json=svcUuid,proto3" json:"svc_uuid,omitempty"`
	Socket               string   `protobuf:"bytes,3,opt,name=socket,proto3" json:"socket,omitempty"`
	Error                ERR      `protobuf:"varint,4,opt,name=error,proto3,enum=dispatcher.ERR" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyMsg) Reset()         { *m = ReplyMsg{} }
func (m *ReplyMsg) String() string { return proto.CompactTextString(m) }
func (*ReplyMsg) ProtoMessage()    {}
func (*ReplyMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_dispatcher_41f30e2fd30cd3f6, []int{4}
}
func (m *ReplyMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyMsg.Unmarshal(m, b)
}
func (m *ReplyMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyMsg.Marshal(b, m, deterministic)
}
func (dst *ReplyMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyMsg.Merge(dst, src)
}
func (m *ReplyMsg) XXX_Size() int {
	return xxx_messageInfo_ReplyMsg.Size(m)
}
func (m *ReplyMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyMsg proto.InternalMessageInfo

func (m *ReplyMsg) GetPodUuid() *POD {
	if m != nil {
		return m.PodUuid
	}
	return nil
}

func (m *ReplyMsg) GetSvcUuid() *SVC {
	if m != nil {
		return m.SvcUuid
	}
	return nil
}

func (m *ReplyMsg) GetSocket() string {
	if m != nil {
		return m.Socket
	}
	return ""
}

func (m *ReplyMsg) GetError() ERR {
	if m != nil {
		return m.Error
	}
	return ERR_NO_ERROR
}

func init() {
	proto.RegisterType((*POD)(nil), "dispatcher.POD")
	proto.RegisterType((*SVC)(nil), "dispatcher.SVC")
	proto.RegisterType((*ConnectMsg)(nil), "dispatcher.ConnectMsg")
	proto.RegisterType((*ListenMsg)(nil), "dispatcher.ListenMsg")
	proto.RegisterType((*ReplyMsg)(nil), "dispatcher.ReplyMsg")
	proto.RegisterEnum("dispatcher.ERR", ERR_name, ERR_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DispatcherClient is the client API for Dispatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DispatcherClient interface {
	Connect(ctx context.Context, in *ConnectMsg, opts ...grpc.CallOption) (*ReplyMsg, error)
	Listen(ctx context.Context, in *ListenMsg, opts ...grpc.CallOption) (*ReplyMsg, error)
}

type dispatcherClient struct {
	cc *grpc.ClientConn
}

func NewDispatcherClient(cc *grpc.ClientConn) DispatcherClient {
	return &dispatcherClient{cc}
}

func (c *dispatcherClient) Connect(ctx context.Context, in *ConnectMsg, opts ...grpc.CallOption) (*ReplyMsg, error) {
	out := new(ReplyMsg)
	err := c.cc.Invoke(ctx, "/dispatcher.Dispatcher/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherClient) Listen(ctx context.Context, in *ListenMsg, opts ...grpc.CallOption) (*ReplyMsg, error) {
	out := new(ReplyMsg)
	err := c.cc.Invoke(ctx, "/dispatcher.Dispatcher/Listen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatcherServer is the server API for Dispatcher service.
type DispatcherServer interface {
	Connect(context.Context, *ConnectMsg) (*ReplyMsg, error)
	Listen(context.Context, *ListenMsg) (*ReplyMsg, error)
}

func RegisterDispatcherServer(s *grpc.Server, srv DispatcherServer) {
	s.RegisterService(&_Dispatcher_serviceDesc, srv)
}

func _Dispatcher_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispatcher.Dispatcher/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).Connect(ctx, req.(*ConnectMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispatcher_Listen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).Listen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispatcher.Dispatcher/Listen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).Listen(ctx, req.(*ListenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dispatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dispatcher.Dispatcher",
	HandlerType: (*DispatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Dispatcher_Connect_Handler,
		},
		{
			MethodName: "Listen",
			Handler:    _Dispatcher_Listen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dispatcher.proto",
}

func init() { proto.RegisterFile("dispatcher.proto", fileDescriptor_dispatcher_41f30e2fd30cd3f6) }

var fileDescriptor_dispatcher_41f30e2fd30cd3f6 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0x41, 0x4b, 0x84, 0x40,
	0x14, 0xc7, 0x33, 0xcb, 0x75, 0x5f, 0x51, 0x36, 0xb4, 0x8b, 0x75, 0x92, 0x20, 0x58, 0x3c, 0xec,
	0x61, 0x23, 0x3a, 0x9b, 0x7a, 0x08, 0x6c, 0x5d, 0x9e, 0xe5, 0x55, 0x6a, 0x66, 0x28, 0x29, 0x1c,
	0x71, 0x74, 0x21, 0xe8, 0xcb, 0xf4, 0x4d, 0x43, 0x77, 0x51, 0xb7, 0xf6, 0xba, 0xc7, 0x79, 0xef,
	0x37, 0xbf, 0x37, 0xbc, 0xff, 0x80, 0xc1, 0x52, 0x99, 0xbf, 0x94, 0xf4, 0x9d, 0x17, 0xd3, 0xbc,
	0x10, 0xa5, 0x20, 0xd0, 0x55, 0xae, 0x2c, 0x50, 0x17, 0xa1, 0x47, 0x2e, 0x40, 0xcf, 0x05, 0x4b,
	0xaa, 0x2a, 0x65, 0xa6, 0x62, 0x29, 0x93, 0x21, 0x0e, 0x72, 0xc1, 0x9e, 0xab, 0x94, 0xd5, 0x44,
	0x14, 0xbb, 0x35, 0x21, 0x97, 0x74, 0x83, 0x90, 0x4b, 0xda, 0x10, 0x0c, 0xc0, 0x15, 0x59, 0xc6,
	0x69, 0xf9, 0x28, 0xdf, 0x88, 0xfd, 0x47, 0x75, 0x34, 0x3b, 0x9d, 0xf6, 0x9e, 0xb0, 0x08, 0xbd,
	0xd6, 0x5d, 0xb3, 0xad, 0x74, 0xff, 0x3f, 0x1b, 0xc5, 0x6e, 0x37, 0x85, 0xc2, 0x30, 0x48, 0x65,
	0xc9, 0xb3, 0x5d, 0x0e, 0xf9, 0x51, 0x40, 0x47, 0x9e, 0x7f, 0x7e, 0xed, 0x70, 0x08, 0x19, 0x83,
	0x26, 0x05, 0xfd, 0xe0, 0xa5, 0xa9, 0x36, 0x8b, 0x5c, 0x9f, 0xc8, 0x35, 0x1c, 0xf2, 0xa2, 0x10,
	0x85, 0x79, 0x60, 0x29, 0x93, 0x93, 0x4d, 0x81, 0x8f, 0x88, 0xab, 0xae, 0x6d, 0x83, 0xea, 0x23,
	0x92, 0x63, 0xd0, 0xe7, 0x61, 0xe2, 0x23, 0x86, 0x68, 0xec, 0x91, 0x11, 0x9c, 0x45, 0xb1, 0x9b,
	0xcc, 0xc3, 0xa7, 0xc4, 0x89, 0x9d, 0x87, 0xc0, 0xb9, 0x0f, 0x7c, 0x43, 0x99, 0x7d, 0x03, 0x78,
	0xad, 0x84, 0xdc, 0xc1, 0x60, 0x1d, 0x14, 0x19, 0xf7, 0xe5, 0x5d, 0x7a, 0x97, 0xe7, 0xfd, 0x7a,
	0xbb, 0x89, 0x5b, 0xd0, 0x56, 0xbb, 0x27, 0xa3, 0x7e, 0xbf, 0xcd, 0x63, 0xfb, 0xb5, 0x57, 0xad,
	0xf9, 0x6f, 0x37, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x1e, 0xbd, 0xb5, 0x83, 0x02, 0x00,
	0x00,
}
